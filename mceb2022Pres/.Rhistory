xlim(as.Date(c('2021-01-01', '2021-06-30'))) +
theme_minimal()
p
p <- ggplot(case) +
geom_step(aes(x=date, y=(cumsum(new_cases)))) +
geom_step(data=samp, aes(x=date, y=(cumsum(count))), col='red') +
scale_x_date(limits = (c('2021-01-01', '2021-06-30'))) +
theme_minimal()
p <- ggplot(case) +
geom_step(aes(x=date, y=(cumsum(new_cases)))) +
geom_step(data=samp, aes(x=date, y=(cumsum(count))), col='red') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
theme_minimal()
p
p <- ggplot(case) +
geom_step(aes(x=date, y=(cumsum(new_cases)))) +
geom_step(data=samp, aes(x=date, y=(cumsum(count))), col='red') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
ylim(0,1000) +
theme_minimal()
p
p <- ggplot(case) +
geom_step(aes(x=date, y=(cumsum(new_cases)))) +
geom_step(data=samp, aes(x=date, y=(cumsum(count))), col='red') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
ylim(0,10000) +
theme_minimal()
p
p <- ggplot(case) +
geom_step(aes(x=date, y=(cumsum(new_cases)))) +
geom_step(data=samp, aes(x=date, y=(cumsum(count))), col='red') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
ylim(0,2500) +
theme_minimal()
p
dat <- bind_rows(samp, case, id='date')
dat
dat <- bind_rows(samp, case, .id='date')
dat
head(samp)
head(case)
case$date <- as.Date(case$date)
head(case)
dat <- bind_rows(samp, case, .id='date')
dat
class(case$date)
dat <- full_join(samp, case, by='date')
dat
p <- ggplot(dat) +
geom_step(aes(x=date, y=(cumsum(new_cases)))) +
geom_step(data=samp, aes(x=date, y=(cumsum(count))), col='red') +
geom_step(data=samp, aes(x=date, y=(cumsum(new_cases)/cumsum(count))), col='dodgerblue') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
ylim(0,2500) +
theme_minimal()
p
colnames(dat)
p <- ggplot(dat) +
geom_step(aes(x=date, y=(cumsum(new_cases)))) +
geom_step(aes(x=date, y=(cumsum(count))), col='red') +
geom_step(aes(x=date, y=(cumsum(new_cases)/cumsum(count))), col='dodgerblue') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
ylim(0,2500) +
theme_minimal()
p
p <- ggplot(dat) +
geom_step(aes(x=date, y=(cumsum(new_cases)))) +
geom_step(aes(x=date, y=(cumsum(count))), col='red') +
geom_step(aes(x=date, y=(2500*cumsum(new_cases)/cumsum(count))), col='dodgerblue') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
scale_y_continuous(sec.axis = ~./2500)
p
p <- ggplot(dat) +
geom_step(aes(x=date, y=(cumsum(new_cases)))) +
geom_step(aes(x=date, y=(cumsum(count))), col='red') +
geom_step(aes(x=date, y=(2500*cumsum(new_cases)/cumsum(count))), col='dodgerblue') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
scale_y_continuous(limits=(0,2500), sec.axis = ~./2500) +
p <- ggplot(dat) +
geom_step(aes(x=date, y=(cumsum(new_cases)))) +
geom_step(aes(x=date, y=(cumsum(count))), col='red') +
geom_step(aes(x=date, y=(2500*cumsum(new_cases)/cumsum(count))), col='dodgerblue') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
scale_y_continuous( sec.axis = ~./2500) +
ylim(0,2500) +
theme_minimal()
p
p <- ggplot(dat) +
geom_step(aes(x=date, y=(cumsum(new_cases)))) +
geom_step(aes(x=date, y=(cumsum(count))), col='red') +
geom_step(aes(x=date, y=(2500*cumsum(new_cases)/cumsum(count))), col='dodgerblue') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
scale_y_continuous( sec.axis = sec_axis(~ . * (1/2500), name = 'samp')) +
ylim(0,2500) +
theme_minimal()
p
p <- ggplot(dat) +
geom_step(aes(x=date, y=(cumsum(new_cases)))) +
geom_step(aes(x=date, y=(cumsum(count))), col='red') +
geom_step(aes(x=date, y=(2500*cumsum(new_cases)/cumsum(count))), col='dodgerblue') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
scale_y_continuous( sec.axis = sec_axis(~ . * (1/2500), name = 'samp')) +
theme_minimal()
p
p <- ggplot(dat) +
geom_step(aes(x=date, y=(cumsum(new_cases)))) +
geom_step(aes(x=date, y=(cumsum(count))), col='red') +
geom_step(aes(x=date, y=(2500*cumsum(new_cases)/cumsum(count))), col='dodgerblue') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
scale_y_continuous(limits=c(0,2500), sec.axis = sec_axis(~ . * (1/2500), name = 'samp')) +
theme_minimal()
p
p <- ggplot(dat) +
geom_step(aes(x=date, y=(cumsum(new_cases)))) +
geom_step(aes(x=date, y=(cumsum(count))), col='red') +
geom_step(aes(x=date, y=(2500*cumsum(count)/cumsum(new_cases))), col='dodgerblue') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
scale_y_continuous(limits=c(0,2500), sec.axis = sec_axis(~ . * (1/2500), name = 'samp')) +
theme_minimal()
p
max(cumsum(case$new_cases))
p2 <- ggplot(dat) +
geom_step(aes(x=date, y=(cumsum(new_cases)))) +
geom_step(aes(x=date, y=(cumsum(count))), col='red') +
geom_step(aes(x=date, y=(400000*cumsum(count)/cumsum(new_cases))), col='dodgerblue') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-12-33'))) +
scale_y_continuous(limits=c(0,400000), sec.axis = sec_axis(~ . * (1/400000), name = 'samp')) +
theme_minimal()
p2
dat <- full_join(samp, case, by='date') %>% mutate(prop = count/new_cases)
dat
dat <- full_join(samp, case, by='date')
dat <- full_join(samp, case, by='date') %>% mutate(sampProp = cumsum(count)/cumsum(new_cases))
dat
bind_rows(dat, id='date')
pivot_longer(dat, cols=c('count', 'new_cases', 'sampProp'))
dat
tmp <- pivot_longer(dat, cols=c('count', 'new_cases', 'sampProp'))
tmp
dat1 <- pivot_longer(dat, cols=c('count', 'new_cases', 'sampProp'))
dat <- full_join(samp, case, by='date') %>% mutate(nSamp = cumsum(count), new=cumsum(new_cases), sampProp = cumsum(count)/cumsum(new_cases))
dat
dat <- full_join(samp, case, by='date') %>% mutate(nSamp = cumsum(count), new=cumsum(new_cases), sampProp = cumsum(count)/cumsum(new_cases)) %>% select(date, new, nSamp, sampProp)
dat
dat1 <- pivot_longer(dat, cols=c('nSamp', 'new', 'sampProp'))
dat
dat1
p1 <- ggplot(dat1) +
geom_step(aes(x=date, y=value, col=name))
p1
dat <- full_join(samp, case, by='date') %>% mutate(nSamp = cumsum(count), new=cumsum(new_cases)) %>% select(date, new, nSamp)
dat1 <- pivot_longer(dat, cols=c('nSamp', 'new'))
p1 <- ggplot(dat1) +
geom_step(aes(x=date, y=value, col=name))
p1
dat
p1 <- ggplot(dat1) +
geom_step(aes(x=date, y=value, col=name)) +
geom_step(dat, aes(x=date, y=2500*nSamp/new))
p1 <- ggplot(dat1) +
geom_step(aes(x=date, y=value, col=name)) +
geom_step(data=dat, aes(x=date, y=2500*nSamp/new))
p1
p1 <- ggplot(dat1) +
geom_step(aes(x=date, y=value, col=name)) +
geom_step(data=dat, aes(x=date, y=2500*nSamp/new)) +
scale_y_continuous('Cumulative Cases or Samples',limits=c(0,2500), sec.axis = sec_axis(~ . * (1/2500), name = 'Cumulative Sampling Proportion'))
p1
p1 <- ggplot(dat1) +
geom_step(aes(x=date, y=value, col=name)) +
geom_step(data=dat, aes(x=date, y=2500*nSamp/new)) +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
scale_y_continuous('Cumulative Cases or Samples',limits=c(0,2500), sec.axis = sec_axis(~ . * (1/2500), name = 'Cumulative Sampling Proportion'))
p1
theme(legend.position = 'bottom')
p1 <- ggplot(dat1) +
geom_step(aes(x=date, y=value, col=name)) +
geom_step(data=dat, aes(x=date, y=2500*nSamp/new), col='dodgerblue') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
scale_y_continuous('Cumulative Cases or Samples',limits=c(0,2500), sec.axis = sec_axis(~ . * (1/2500), name = 'Cumulative Sampling Proportion')) +
scale_color_manual(values=c('black', 'red'), labels=c('Cumulative Cases', 'Cumulative Sequences')) +
theme(legend.position = 'bottom',
axis.text.y.right = element_text(color = "dodgerblue")))
p1 <- ggplot(dat1) +
geom_step(aes(x=date, y=value, col=name)) +
geom_step(data=dat, aes(x=date, y=2500*nSamp/new), col='dodgerblue') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
scale_y_continuous('Cumulative Cases or Samples',limits=c(0,2500), sec.axis = sec_axis(~ . * (1/2500), name = 'Cumulative Sampling Proportion')) +
scale_color_manual(values=c('black', 'red'), labels=c('Cumulative Cases', 'Cumulative Sequences')) +
theme(legend.position = 'bottom',
axis.text.y.right = element_text(color = "dodgerblue"))
p1
p1 <- ggplot(dat1) +
geom_step(aes(x=date, y=value, col=name)) +
geom_step(data=dat, aes(x=date, y=2500*nSamp/new), col='dodgerblue') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
scale_y_continuous('Cumulative Cases or Samples',limits=c(0,2500), sec.axis = sec_axis(~ . * (1/2500), name = 'Cumulative Sampling Proportion')) +
scale_color_manual(values=c('black', 'red'), labels=c('Cumulative Cases', 'Cumulative Sequences')) +
theme(legend.position = 'bottom',
axis.text.y.right = element_text(color = "dodgerblue"),
axis.label.y.right = element_text(color = "red")))
p1 <- ggplot(dat1) +
geom_step(aes(x=date, y=value, col=name)) +
geom_step(data=dat, aes(x=date, y=2500*nSamp/new), col='dodgerblue') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
scale_y_continuous('Cumulative Cases or Samples',limits=c(0,2500), sec.axis = sec_axis(~ . * (1/2500), name = 'Cumulative Sampling Proportion')) +
scale_color_manual(values=c('black', 'red'), labels=c('Cumulative Cases', 'Cumulative Sequences')) +
theme(legend.position = 'bottom',
axis.text.y.right = element_text(color = "dodgerblue"),
axis.label.y.right = element_text(color = "red"))
p1
p1 <- ggplot(dat1) +
geom_step(aes(x=date, y=value, col=name)) +
geom_step(data=dat, aes(x=date, y=2500*nSamp/new), col='dodgerblue') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
scale_y_continuous('Cumulative Cases or Samples',limits=c(0,2500), sec.axis = sec_axis(~ . * (1/2500), name = 'Cumulative Sampling Proportion')) +
scale_color_manual(values=c('black', 'red'), labels=c('Cumulative Cases', 'Cumulative Sequences')) +
theme(legend.position = 'bottom',
axis.text.y.right = element_text(color = "dodgerblue"),
axis.title.y.right = element_text(color = "red"))
p1
p1 <- ggplot(dat1) +
geom_step(aes(x=date, y=value, col=name)) +
geom_step(data=dat, aes(x=date, y=2500*nSamp/new), col='dodgerblue') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
scale_y_continuous('Cumulative Cases or Samples',limits=c(0,2500), sec.axis = sec_axis(~ . * (1/2500), name = 'Cumulative Sampling Proportion')) +
scale_color_manual(values=c('black', 'red'), labels=c('Cumulative Cases', 'Cumulative Sequences')) +
theme(legend.position = 'bottom',
axis.text.y.right = element_text(color = "dodgerblue"),
axis.title.y.right = element_text(color = "dodgerblue"))
p1
p1 <- ggplot(dat1) +
geom_step(aes(x=date, y=value, col=name)) +
geom_step(data=dat, aes(x=date, y=2500*nSamp/new), col='dodgerblue') +
scale_x_date(limits = as.Date(c('2021-01-01', '2021-06-30'))) +
scale_y_continuous('Cumulative Cases or Samples',limits=c(0,2500), sec.axis = sec_axis(~ . * (1/2500), name = 'Cumulative Sampling Proportion')) +
scale_color_manual(values=c('black', 'red'), labels=c('Cumulative Cases', 'Cumulative Sequences')) +
theme_minimal() +
theme(legend.position = 'left',
legend.title = element_blank(),
axis.text.y.right = element_text(color = "dodgerblue"),
axis.title.y.right = element_text(color = "dodgerblue"))
p1
p1 <- ggplot(dat1) +
geom_step(aes(x=date, y=value, col=name)) +
geom_step(data=dat, aes(x=date, y=2500*nSamp/new), col='dodgerblue') +
scale_x_date('', limits = as.Date(c('2021-01-01', '2021-06-30'))) +
scale_y_continuous('Cumulative Cases or Samples',limits=c(0,2500), sec.axis = sec_axis(~ . * (1/2500), name = 'Cumulative Sampling Proportion')) +
scale_color_manual(values=c('black', 'red'), labels=c('Cumulative Cases', 'Cumulative Sequences')) +
theme_minimal() +
theme(legend.position = 'left',
legend.title = element_blank(),
axis.text.y.right = element_text(color = "dodgerblue"),
axis.title.y.right = element_text(color = "dodgerblue"))
p1
p1 <- ggplot(dat1) +
geom_step(aes(x=date, y=value, col=name)) +
geom_step(data=dat, aes(x=date, y=2500*nSamp/new), col='dodgerblue') +
scale_x_date('', labels=scales::date_format("%b %Y"), limits = as.Date(c('2021-01-01', '2021-06-30'))) +
scale_y_continuous('Cumulative Cases or Samples',limits=c(0,2500), sec.axis = sec_axis(~ . * (1/2500), name = 'Cumulative Sampling Proportion')) +
scale_color_manual(values=c('black', 'red'), labels=c('Cumulative Cases', 'Cumulative Sequences')) +
theme_minimal() +
theme(legend.position = 'left',
legend.title = element_blank(),
axis.text.y.right = element_text(color = "dodgerblue"),
axis.title.y.right = element_text(color = "dodgerblue"))
p1
p1 <- ggplot(dat1) +
geom_step(aes(x=date, y=value, col=name)) +
geom_step(data=dat, aes(x=date, y=2500*nSamp/new), col='dodgerblue') +
scale_x_date('', labels=scales::date_format("%b %Y"), limits = as.Date(c('2021-01-01', '2021-06-30'))) +
scale_y_continuous('Cumulative Cases or Samples',limits=c(0,2500), sec.axis = sec_axis(~ . * (1/2500), name = 'Cumulative Sampling Proportion')) +
scale_color_manual(values=c('black', 'red'), labels=c('Cumulative Cases', 'Cumulative Sequences')) +
theme_minimal() +
theme(legend.position = 'bottom',
legend.title = element_blank(),
axis.text.y.right = element_text(color = "dodgerblue"),
axis.title.y.right = element_text(color = "dodgerblue"))
pdf('figs/early2021SampEg.pdf', useDingbats = F, width=4, height=3)
p1
dev.off()
p1
getwd()
setwd("~/Desktop/phyloDataSignal/mceb2022Pres/")
setwd('~/Desktop/phyloDataSignal/mceb2022Pres')
pdf('figs/early2021SampEg.pdf', useDingbats = F, width=4, height=3)
p1
dev.off()
pdf('/figs/early2021SampEg.pdf', useDingbats = F, width=4, height=3)
pdf('figs/early2021SampEg.pdf', useDingbats = F, width=4, height=3)
p1
dev.off()
ggpubr::ggexport(filename = "figs/early2021SampEg.pdf")
p1 %>% ggpubr::ggexport(filename = "figs/early2021SampEg.pdf")
p1 %>% ggpubr::ggexport(filename = "figs/early2021SampEg.pdf", width=1100)
pdf('figs/early2021SampEg.pdf', useDingbats=F, width=4, height=3)
p1
dev.off()
pdf('figs/early2021SampEg.pdf', useDingbats=F, width=4, height=3.5)
p1
dev.off()
pdf('figs/early2021SampEg.pdf', useDingbats=F, width=5, height=4)
p1
dev.off()
dists <- ggplot(data = data.frame(x = c(0, 4)), aes(x)) +
stat_function(fun = dnorm, n = 10000, args = list(mean = 1.5, sd = 0.2),
fill=alpha(viridis::viridis(4)[1], 0.5), geom='density') +
# fulldata
stat_function(fun = dnorm, n = 10000, args = list(mean = 2.5, sd = 0.2),
fill=alpha(viridis::viridis(4)[2], 0.5), geom='density') +
# no data
stat_function(fun = dgamma, n = 10000, args = list(shape = 3.5, rate = 2.5),
fill=alpha(viridis::viridis(4)[3], 0.5), geom='density') + ylab("") +
# seq data
stat_function(fun = dnorm, n = 10000, args = list(mean = 3, sd = 0.2),
fill=alpha(viridis::viridis(4)[4], 0.5), geom='density') +
# wasserstein
annotate("segment", x = 2.51, xend = 3, y = 1.5, yend = 1.5,
colour = "black", size = 1, arrow = arrow(ends = "both", angle = 90, length = unit(.2,"cm"))) +
annotate("label", x = 2.75, y = 1.5, colour = "black", label='W[S]==0.5', parse=T) +
annotate("segment", x = 1.5, xend = 2.49, y = 1.5, yend = 1.5,
colour = "black", size = 1, arrow = arrow(ends = "both", angle = 90, length = unit(.2,"cm"))) +
annotate("label", x = 2, y = 1.5, colour = "black", label='W[D]==1.0', parse=T) +
annotate("segment", x = 1, xend = 2.49, y = 0.4, yend = 0.4,
colour = "black", size = 1, arrow = arrow(ends = "both", angle = 90, length = unit(.2,"cm"))) +
annotate("label", x = 1.75, y = 0.4, colour = "black", label='W[N]==1.15', parse=T) +
annotate("label", x = 0.6, y = 1, colour = "black", label='W[X]==integral(paste("| ", F[X]^-1*(u)-F[F]^-1*(u), " |")*du, 0, 1)', parse=T, size=4) +
annotate("label", x = 3.5, y = 1, colour = "black", label='W[D]>W[S]%->%Seq~Driven', parse=T) +
xlab(TeX('Posterior $R_{0}$')) + ylab('Density') +
coord_fixed() +
theme_minimal() +
theme(legend.position='bottom',
legend.title=element_text(size=14),
legend.text=element_text(size=14),
axis.title=element_text(size=14))
plot_grid(dataPlot, dists, nrow=2, rel_heights=c(1,3))
dists
pdf('figs/compPosterior.pdf', useDingbats = F, width=4, height=3)
dists
dev.off()
trsup <- data.frame(x=c(0,0,1.2),y=c(0,1.2,1.2))
trinf <- data.frame(x=c(0,1.2,1.2),y=c(0,0,1.2))
p1 <- ggplot() +
xlim(0,1.2) + ylim(0,1.2) +
# shade quad 1
geom_polygon(aes(x=x, y=y), data=trsup, fill=alpha("grey", 0.5)) +
geom_polygon(aes(x=x, y=y), data=trinf, fill=alpha("white", 0.5)) +
geom_quadrant_lines(linetype = "solid") +
coord_fixed(ratio = 1) +
ylab(TeX('W_{S}')) + xlab(TeX('W_{D}')) +
annotate("text", 	x = c(0.2,1.1),
y = c(1.1,0.2),
label = c("atop(Date-Driven, (W[S]>W[D]))",
"atop(Seq-Driven, (W[S]<W[D]))"), size=5, parse=T) +
# point example
annotate('segment', x=0, y=0, xend=0.5, yend=0.1) +
annotate('segment', x=0.5, y=0.1, xend=0.5, yend=0.5) +
annotate('point', x=0.5, y=0.1, size=1.5) +
annotate('text', parse=T, x=0.65, y=0.1, label='paste("(", 0.5,",", ~0.1,")")') +
annotate('text', parse=T, x=0.25, y=0.1, size=4, angle=180*(atan(0.1/0.5)/pi), label="r[SD]==0.51") +
annotate('text', parse=T, x=0.65, y=0.25, size=4, label="d[SD]==0.4") +
annotate("label", x = 0.825, y = 0.85, colour = "black", label='r[SD]==sqrt(W[S]^2+W[D]^2)', parse=T, size=5) +
annotate("label", x = 0.825, y = 0.75, colour = "black", label='d[SD]==abs(W[S]-W[D])', parse=T, size=5) +
theme_minimal() +
theme(legend.position='bottom',
legend.title=element_text(size=14),
legend.text=element_text(size=14),
axis.title=element_text(size=14),
axis.text=element_text(size=12))
pdf('figs/fullPlane.pdf', useDingbats = F)
p1
dev.off()
dists
pdf('figs/compPosterior.pdf', useDingbats = F, width=4, height=3)
dists
dev.off()
dists <- ggplot(data = data.frame(x = c(0, 4)), aes(x)) +
stat_function(fun = dnorm, n = 10000, args = list(mean = 1.5, sd = 0.2),
fill=alpha(viridis::viridis(4)[1], 0.5), geom='density') +
# fulldata
stat_function(fun = dnorm, n = 10000, args = list(mean = 2.5, sd = 0.2),
fill=alpha(viridis::viridis(4)[2], 0.5), geom='density') +
# no data
stat_function(fun = dgamma, n = 10000, args = list(shape = 3.5, rate = 2.5),
fill=alpha(viridis::viridis(4)[3], 0.5), geom='density') + ylab("") +
# seq data
stat_function(fun = dnorm, n = 10000, args = list(mean = 3, sd = 0.2),
fill=alpha(viridis::viridis(4)[4], 0.5), geom='density') +
# wasserstein
annotate("segment", x = 2.51, xend = 3, y = 1.5, yend = 1.5,
colour = "black", arrow = arrow(ends = "both", angle = 90, length = unit(.2,"cm"))) +
annotate("label", x = 2.75, y = 1.5, colour = "black", label='W[S]==0.5', parse=T) +
annotate("segment", x = 1.5, xend = 2.49, y = 1.5, yend = 1.5,
colour = "black", arrow = arrow(ends = "both", angle = 90, length = unit(.2,"cm"))) +
annotate("label", x = 2, y = 1.5, colour = "black", label='W[D]==1.0', parse=T) +
annotate("segment", x = 1, xend = 2.49, y = 0.4, yend = 0.4,
colour = "black",arrow = arrow(ends = "both", angle = 90, length = unit(.2,"cm"))) +
annotate("label", x = 1.75, y = 0.4, colour = "black", label='W[N]==1.15', parse=T) +
annotate("label", x = 0.6, y = 1, colour = "black", label='W[X]==integral(paste("| ", F[X]^-1*(u)-F[F]^-1*(u), " |")*du, 0, 1)', parse=T) +
annotate("label", x = 3.5, y = 1, colour = "black", label='W[D]>W[S]%->%Seq~Driven', parse=T) +
xlab(TeX('Posterior $R_{0}$')) + ylab('Density') +
coord_fixed() +
theme_minimal() +
theme(legend.position='bottom',
legend.title=element_text(size=14),
legend.text=element_text(size=14),
axis.title=element_text(size=14))
pdf('figs/compPosterior.pdf', useDingbats = F, width=4, height=3)
dists
dev.off()
dists <- ggplot(data = data.frame(x = c(0, 4)), aes(x)) +
stat_function(fun = dnorm, n = 10000, args = list(mean = 1.5, sd = 0.2),
fill=alpha(viridis::viridis(4)[1], 0.5), geom='density') +
# fulldata
stat_function(fun = dnorm, n = 10000, args = list(mean = 2.5, sd = 0.2),
fill=alpha(viridis::viridis(4)[2], 0.5), geom='density') +
# no data
stat_function(fun = dgamma, n = 10000, args = list(shape = 3.5, rate = 2.5),
fill=alpha(viridis::viridis(4)[3], 0.5), geom='density') + ylab("") +
# seq data
stat_function(fun = dnorm, n = 10000, args = list(mean = 3, sd = 0.2),
fill=alpha(viridis::viridis(4)[4], 0.5), geom='density') +
# wasserstein
annotate("segment", x = 2.51, xend = 3, y = 1.5, yend = 1.5,
colour = "black", arrow = arrow(ends = "both", angle = 90, length = unit(.2,"cm"))) +
annotate("label", x = 2.75, y = 1.5, colour = "black", label='W[S]==0.5', parse=T) +
annotate("segment", x = 1.5, xend = 2.49, y = 1.5, yend = 1.5,
colour = "black", arrow = arrow(ends = "both", angle = 90, length = unit(.2,"cm"))) +
annotate("label", x = 2, y = 1.5, colour = "black", label='W[D]==1.0', parse=T) +
annotate("segment", x = 1, xend = 2.49, y = 0.4, yend = 0.4,
colour = "black",arrow = arrow(ends = "both", angle = 90, length = unit(.2,"cm"))) +
annotate("label", x = 1.75, y = 0.4, colour = "black", label='W[N]==1.15', parse=T) +
annotate("label", x = 0.6, y = 1, colour = "black", label='W[X]==integral(paste("| ", F[X]^-1*(u)-F[F]^-1*(u), " |")*du, 0, 1)', parse=T) +
annotate("label", x = 3.5, y = 1, colour = "black", label='W[D]>W[S]%->%Seq~Driven', parse=T) +
xlab(TeX('Posterior $R_{0}$')) + ylab('Density') +
coord_fixed() +
theme_minimal() +
theme(legend.position='bottom',
legend.title=element_text(size=14),
legend.text=element_text(size=14),
axis.title=element_text(size=14))
pdf('figs/compPosterior.pdf', useDingbats = F, width=5, height=3)
dists
dev.off()
dists <- ggplot(data = data.frame(x = c(0, 4)), aes(x)) +
stat_function(fun = dnorm, n = 10000, args = list(mean = 1.5, sd = 0.2),
fill=alpha(viridis::viridis(4)[1], 0.5), geom='density') +
# fulldata
stat_function(fun = dnorm, n = 10000, args = list(mean = 2.5, sd = 0.2),
fill=alpha(viridis::viridis(4)[2], 0.5), geom='density') +
# no data
stat_function(fun = dgamma, n = 10000, args = list(shape = 3.5, rate = 2.5),
fill=alpha(viridis::viridis(4)[3], 0.5), geom='density') + ylab("") +
# seq data
stat_function(fun = dnorm, n = 10000, args = list(mean = 3, sd = 0.2),
fill=alpha(viridis::viridis(4)[4], 0.5), geom='density') +
# wasserstein
annotate("segment", x = 2.51, xend = 3, y = 1.5, yend = 1.5,
colour = "black", arrow = arrow(ends = "both", angle = 90, length = unit(.2,"cm"))) +
annotate("label", x = 2.75, y = 1.5, colour = "black", label='W[S]==0.5', parse=T) +
annotate("segment", x = 1.5, xend = 2.49, y = 1.5, yend = 1.5,
colour = "black", arrow = arrow(ends = "both", angle = 90, length = unit(.2,"cm"))) +
annotate("label", x = 2, y = 1.5, colour = "black", label='W[D]==1.0', parse=T) +
annotate("segment", x = 1, xend = 2.49, y = 0.4, yend = 0.4,
colour = "black",arrow = arrow(ends = "both", angle = 90, length = unit(.2,"cm"))) +
annotate("label", x = 1.75, y = 0.4, colour = "black", label='W[N]==1.15', parse=T) +
annotate("label", x = 0.6, y = 1, colour = "black", label='W[X]==integral(paste("| ", F[X]^-1*(u)-F[F]^-1*(u), " |")*du, 0, 1)', parse=T) +
annotate("label", x = 3.5, y = 1, colour = "black", label='W[D]>W[S]%->%Seq~Driven', parse=T) +
xlab(TeX('Posterior $R_{0}$')) + ylab('Density') +
coord_fixed() +
theme_minimal() +
theme(legend.position='bottom',
legend.title=element_text(size=14),
legend.text=element_text(size=14),
axis.title=element_text(size=14))
pdf('figs/compPosterior.pdf', useDingbats = F, width=6, height=3)
dists
dev.off()
dists <- ggplot(data = data.frame(x = c(0, 4)), aes(x)) +
stat_function(fun = dnorm, n = 10000, args = list(mean = 1.5, sd = 0.2),
fill=alpha(viridis::viridis(4)[1], 0.5), geom='density') +
# fulldata
stat_function(fun = dnorm, n = 10000, args = list(mean = 2.5, sd = 0.2),
fill=alpha(viridis::viridis(4)[2], 0.5), geom='density') +
# no data
stat_function(fun = dgamma, n = 10000, args = list(shape = 3.5, rate = 2.5),
fill=alpha(viridis::viridis(4)[3], 0.5), geom='density') + ylab("") +
# seq data
stat_function(fun = dnorm, n = 10000, args = list(mean = 3, sd = 0.2),
fill=alpha(viridis::viridis(4)[4], 0.5), geom='density') +
# wasserstein
annotate("segment", x = 2.51, xend = 3, y = 1.5, yend = 1.5,
colour = "black", arrow = arrow(ends = "both", angle = 90, length = unit(.2,"cm"))) +
annotate("label", x = 2.75, y = 1.5, colour = "black", label='W[S]==0.5', parse=T) +
annotate("segment", x = 1.5, xend = 2.49, y = 1.5, yend = 1.5,
colour = "black", arrow = arrow(ends = "both", angle = 90, length = unit(.2,"cm"))) +
annotate("label", x = 2, y = 1.5, colour = "black", label='W[D]==1.0', parse=T) +
annotate("segment", x = 1, xend = 2.49, y = 0.4, yend = 0.4,
colour = "black",arrow = arrow(ends = "both", angle = 90, length = unit(.2,"cm"))) +
annotate("label", x = 1.75, y = 0.4, colour = "black", label='W[N]==1.15', parse=T) +
annotate("label", x = 0.6, y = 1, colour = "black", label='W[X]==integral(paste("| ", F[X]^-1*(u)-F[F]^-1*(u), " |")*du, 0, 1)', parse=T) +
annotate("label", x = 3.5, y = 1, colour = "black", label='W[D]>W[S]%->%Seq~Driven', parse=T) +
xlab(TeX('Posterior $R_{0}$')) + ylab('Density') +
coord_fixed() +
theme_minimal() +
theme(legend.position='bottom',
legend.title=element_text(size=14),
legend.text=element_text(size=14),
axis.title=element_text(size=14))
pdf('figs/compPosterior.pdf', useDingbats = F, width=8, height=4)
dists
dev.off()
